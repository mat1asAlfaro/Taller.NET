@page "/sensor";
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using Radzen
@using Radzen.Blazor
@inject NavigationManager Navigation

<h1>Sensor de Temperatura</h1>

<RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12" AlignItems="AlignItems.Center">
  <RadzenRadialGauge Style="width: 100%; height: 300px;">
    <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="20" Min="0" Max="260" TickPosition=@tickPosition>
      <RadzenRadialGaugeScalePointer Value=@currentTemperature Length="0.6" ShowValue=@showValue>
        <Template Context="pointer">
          <RadzenStack AlignItems="AlignItems.Center" Gap="0" class="rz-mt-4">
            <RadzenText TextStyle="TextStyle.H5" class="rz-m-0"><strong>@pointer.Value</strong></RadzenText>
            <RadzenText TextStyle="TextStyle.Caption">Temperatura</RadzenText>
          </RadzenStack>
        </Template>
      </RadzenRadialGaugeScalePointer>
      <RadzenRadialGaugeScaleRange From="0" To="90" Fill="green" />
      <RadzenRadialGaugeScaleRange From="90" To="140" Fill="orange" />
      <RadzenRadialGaugeScaleRange From="140" To="260" Fill="red" />
    </RadzenRadialGaugeScale>
  </RadzenRadialGauge>
</RadzenStack>

@code {
  bool showValue = true;
  double currentTemperature = 0;
  private HubConnection? hubConnection;
  IEnumerable<GaugeTickPosition> tickPositions = Enum.GetValues(typeof(GaugeTickPosition)).Cast<GaugeTickPosition>();
  GaugeTickPosition tickPosition = GaugeTickPosition.Inside;

  protected override async Task OnInitializedAsync()
  {
    hubConnection = new HubConnectionBuilder()
    .WithUrl(Navigation.ToAbsoluteUri("/temperatureSensor"))
    .Build();

    hubConnection.On<int>("temperatureChange", (temperature) =>
    {
      Console.WriteLine("Temperature has changed, " + temperature);
      currentTemperature = temperature;
      InvokeAsync(StateHasChanged);
    });

    await hubConnection.StartAsync();
  }

  public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

  public async ValueTask DisponeAsync()
  {
    if (hubConnection is not null)
    {
      await hubConnection.DisposeAsync();
    }
  }
}